name: ci
on:
  push:
    branches: [ "**" ]
    tags: [ "v*" ]
  pull_request:
jobs:
  determinism:
    name: blessed determinism
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps (determinism)
        run: |
          python -m pip install --upgrade pip
          pip install numpy scipy torch pandas matplotlib pytest
      - name: Run determinism audit
        run: pytest tests/test_backtest_cli_determinism.py
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', '.pre-commit-config.yaml') }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
      - name: Install deps (minimal CPU)
        run: |
          python -m pip install --upgrade pip
          pip install numpy scipy torch pytest pytest-cov build
          pip install ruff mypy pre-commit
          # optional extras for CLI smoke
          pip install pandas matplotlib
      - name: Pre-commit
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: pre-commit run --all-files --show-diff-on-failure
      - name: Run tests
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.python-version }}" = "3.11" ]; then
            pytest --cov=neuro_ant_optimizer --cov-report=xml --cov-report=html --cov-fail-under=85
          else
            pytest -q
          fi
      - name: Upload coverage HTML
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-${{ matrix.python-version }}-${{ matrix.os }}
          path: htmlcov
      - name: mypy (types)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        env:
          MYPYPATH: neuro-ant-optimizer/src
        run: |
          mypy neuro-ant-optimizer/src
      - name: CLI smoke (backtest)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          neuro-ant-optimizer/src/neuro_ant_optimizer/backtest/backtest.py >/dev/null 2>&1 || true
          python -c "import sys,subprocess; subprocess.check_call(['neuro-ant-backtest','--csv','neuro-ant-optimizer/backtest/sample_returns.csv','--lookback','5','--step','2','--ewma_span','3','--objective','sharpe','--out','neuro-ant-optimizer/backtest/out_ci'])"
      - name: Build wheel
        run: |
          python -m build --wheel
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl
  release:
    name: release build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-release-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install build backend
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build wheel
        run: python -m build --wheel
      - name: Upload release wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ github.ref_name }}
          path: dist/*.whl
